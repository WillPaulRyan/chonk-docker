{"version":3,"sources":["components/Form.js","components/Hero.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","url","handleChange","event","setState","target","value","preventDefault","fetch","method","headers","body","JSON","stringify","longUrl","this","then","res","json","data","shortUrl","catch","err","console","log","id","onSubmit","handleSubmit","bind","type","onChange","placeholder","autoComplete","required","src","alt","React","Component","Hero","className","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mUAGqBA,G,iNACnBC,MAAQ,CACNC,IAAK,I,EAGPC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACH,IAAKE,EAAME,OAAOC,S,qHAGhBH,G,mFACjBA,EAAMI,iB,SACAC,MAAM,mBAAoB,CAC9BC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAACC,QAASC,KAAKf,MAAMC,QAEzCe,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKf,SAAS,CAACH,IAAKkB,EAAKC,cAE1BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,M,sIAI5B,OACE,yBAAKG,GAAG,kBACN,0BAAMA,GAAG,OAAOhB,OAAO,OAAOiB,SAAUX,KAAKY,aAAaC,KAAKb,OAC7D,2BAAOc,KAAK,MACVJ,GAAG,MACHnB,MAAOS,KAAKf,MAAMC,IAClB6B,SAAUf,KAAKb,aACf6B,YAAY,yBACZC,aAAa,MACbC,UAAQ,IAEV,2BAAOJ,KAAK,QAAQJ,GAAG,SACrBS,IAAI,sBAAsBC,IAAI,iB,GApCRC,IAAMC,YCCnBC,G,uLAGjB,OACE,yBAAKb,GAAG,QACN,yBAAKA,GAAG,YACN,uBAAGc,UAAU,OAAOC,KAAK,MAAK,yBAAKD,UAAU,OAAOL,IAAI,oBAAoBC,IAAI,gBAChF,yBAAKV,GAAG,SACN,yDACA,mFAGJ,kBAAC,EAAD,MACA,yBAAKA,GAAG,qB,GAbkBW,IAAMC,Y,MCQzBI,MARf,WACE,OACE,yBAAKhB,GAAG,OACN,kBAAC,EAAD,QCKciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.d1757ce5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.css';\r\n\r\nexport default class Form extends React.Component {\r\n  state = {\r\n    url: ''\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({url: event.target.value});\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    await fetch('/api/url/shorten', {\r\n      method: 'post',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({longUrl: this.state.url})\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.setState({url: data.shortUrl})\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"form-container\">\r\n        <form id=\"form\" method=\"post\" onSubmit={this.handleSubmit.bind(this)}>\r\n          <input type=\"url\"\r\n            id=\"url\"\r\n            value={this.state.url}\r\n            onChange={this.handleChange}\r\n            placeholder=\"Paste your URL here...\"\r\n            autoComplete=\"off\"\r\n            required\r\n          />\r\n          <input type=\"image\" id=\"button\" \r\n            src=\"./images/button.png\" alt=\"Chonk!\" />\r\n        </form>\r\n  \r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Form from './Form.js'\r\nimport './Hero.css';\r\n\r\nexport default class Hero extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"hero\">\r\n        <div id=\"hero-top\">\r\n          <a className=\"logo\" href=\"/#\"><img className=\"logo\" src=\"./images/logo.png\" alt=\"Chonk Logo\" /></a>\r\n          <div id=\"blurb\">\r\n            <h1>URLs getting out of hand?</h1>\r\n            <h2>With Chonk.tk, send urls you won't be ashamed of!</h2>\r\n          </div>\r\n        </div>\r\n        <Form />\r\n        <div id=\"hero-bottom\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport Hero from './components/Hero'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <Hero />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}